image: java:7

.job_template: &job_definition
  tags:
    - qdacity
  environment: Production


.cache_node: &node_cache
  key: "node_modules"
  paths:
    - war/node_modules/
    - localization/node_modules/

after_script:
    - rm -f /tmp/$CI_PIPELINE_ID.json
    - rm -r -f ./war/node_modules/

stages:
  - build
  - test
  - deploy

.frontend_build: &frontend_build
  stage: build
  only:
    - branches
  artifacts:
    paths:
      - target/qdacity-war/dist/
      - target/qdacity-war/*.jsp
      - target/qdacity-war/sw.js
      - war/translations/template.txt
      - war/dist/messages/
      - war/dist/js/index.dist.js
    expire_in: 3 mos

frontend_prod_build:
  <<: *job_definition
  <<: *frontend_build
  script:
    - build_babel_plugin
    - build_frontend bundle-ci set-config-target generate-language-files sw

frontend_prod_build_nm:
  <<: *job_definition
  <<: *frontend_build
  except:
    - master
  script:
    - build_babel_plugin
    - build_frontend bundle-ci generate-language-files

backend_prod_build:
  <<: *job_definition
  stage: build
  only:
    - branches
  artifacts:
    paths:
      - target/qdacity-war
      - ./pom.xml
    expire_in: 3 mos
  script:
    - cp ./pom.base.xml ./pom.xml
    - sed -i -e 's/APPENGINE_APP_ID/'$PROJECT_ID_PRODUCTION'/g' ./pom.xml
    - mvn clean package -DskipTests

rtcsvc_prod_build:
  <<: *job_definition
  stage: build
  only:
    - master
  cache:
    key: "rtcsvc:node_modules"
    paths:
    - realtime-service/node_modules/
  artifacts:
    paths:
      - realtime-service/
    expire_in: 1 week
  script:
    - cd realtime-service
    - npm install

backend_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - branches
  artifacts:
    paths:
      - target/site/jacoco-ut
    expire_in: 6 mos
  script:
    - mvn test
    - awk -F"," '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, " lines covered"; print 100*covered/lines, "% covered" }' target/site/jacoco-ut/jacoco.csv
  dependencies:
    - backend_prod_build

frontend_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - branches
  artifacts:
    paths:
      - war/coverage
    expire_in: 6 mos
  script:
    - cd localization
    - npm ci
    - cd ..
    - cd war
    - npm ci
    - echo $API_CONFIG_PRODUCTION > ./api_config.json
    - gulp set-config-dist
    - npm run test
  dependencies:
    - frontend_prod_build
  allow_failure: true
  
frontend_prod_translation_tests:
  <<: *job_definition
  stage: test
  only:
    - branches
  script:
    - cd localization
    - npm ci
    - cd ..
    - cd war
    - npm ci
    - echo $API_CONFIG_PRODUCTION > ./api_config.json
    - gulp generate-language-files --verifyTranslation
  allow_failure: true

acceptance_tests:
  <<: *job_definition
  stage: test
  only:
    - branches 
  cache:
    key: "acceptance_tests"
    paths:
    - realtime-service/node_modules/
  script:
    - ./executeAcceptanceTestsJob.sh
  artifacts:
    paths:
      - logs
    expire_in: 6 mos
  dependencies:
    - frontend_prod_build
    - backend_prod_build
  allow_failure: true

frontend_babel_plugin_test:
  <<: *job_definition
  stage: test
  only:
    - branches
  script:
    - build_babel_plugin test

rtcsvc_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - master
  cache:
    key: "rtcsvc:node_modules"
    paths:
    - realtime-service/node_modules/
    policy: pull
  artifacts:
    paths:
      - realtime-service/coverage
    expire_in: 1 mo
  script:
    - cd realtime-service
    - echo $RTCSVC_ENV | sed -e 's/\r/\n/g' > .env
    - npm run test
  dependencies:
    - rtcsvc_prod_build

.deploy_prod: &deployment_template
  <<: *job_definition
  stage: deploy
  script:
    - echo $DEPLOY_KEY_FILE_PRODUCTION > /tmp/$CI_PIPELINE_ID.json
    - WAR=$(pwd)/target/qdacity-war
    - appcfg.sh --enable_jar_splitting  --enable_jar_classes --noisy --service_account_json_key_file=/tmp/$CI_PIPELINE_ID.json update $WAR

deploy_rtcsvc:
  <<: *job_definition
  stage: deploy
  only:
    - master
  script:
    - cd realtime-service
    - bash ./deployment/deploy_from_gitlab_ci.sh

deploy_auth_proxy:
  <<: *job_definition
  stage: deploy
  only:
    - branches
  script:
    - cd auth-proxy
    - gcloud app deploy -v 1 --quiet
  when: manual

deploy_prod:
  <<: *deployment_template
  dependencies:
    - backend_prod_build
    - frontend_prod_build
  only:
    - master

deploy_prod_manual:
  <<: *deployment_template
  only:
    - branches
  except:
    - master
  dependencies:
    - backend_prod_build
    - frontend_prod_build
  when: manual

deploy_non_minified:
  <<: *deployment_template
  only:
    - branches
  except:
    - master
  dependencies:
    - backend_prod_build
    - frontend_prod_build_nm
  when: manual

.global_functions: &global_helpers |
    function build_frontend() {
      cd war
      echo $API_CONFIG_PRODUCTION > ./api_config.json
      rm -f -r ./dist/js/*
      npm ci
      while [ -n "$1" ]; do
        subcommand="$1"
        shift
        gulp $subcommand
      done
      cd ..
    }

    function build_babel_plugin() {
      cd localization
      npm ci
      while [ -n "$1" ]; do
        subcommand="$1"
        shift
        npm run $subcommand
      done
      cd ..
    }

before_script:
  - *global_helpers
