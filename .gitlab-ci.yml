image: java:7

.job_template: &job_definition
  tags:
    - qdacity
  environment: Production

.cache_node: &node_cache
  key: "node_modules"
  untracked: true
  paths:
    - war/node_modules/

after_script:
    - rm -f /tmp/$CI_PIPELINE_ID.json

stages:
  - build
  - test
  - report
  - deploy

.frontend_build: &frontend_build
  stage: build
  only:
    - branches
  cache: *node_cache
  artifacts:
    paths:
      - target/qdacity-war/dist/
      - target/qdacity-war/*.jsp
    expire_in: 3 mos

frontend_prod_build:
  <<: *job_definition
  <<: *frontend_build
  script:
    - build_frontend bundle minify set-react-production

frontend_prod_build_nm:
  <<: *job_definition
  <<: *frontend_build
  except:
    - master
  script:
    - build_frontend bundle

backend_prod_build:
  <<: *job_definition
  stage: build
  only:
    - branches
  artifacts:
    paths:
      - target/qdacity-war
    expire_in: 3 mos
  script:
    - mvn clean package

rtcsvc_prod_build:
  <<: *job_definition
  stage: build
  only:
    - master
  cache:
    key: "rtcsvc:node_modules"
    untracked: true
    paths:
    - realtime-service/node_modules/
  artifacts:
    paths:
      - realtime-service/
    expire_in: 1 week
  script:
    - cd realtime-service
    - npm install

backend_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - branches
  artifacts:
    paths:
      - target/site/jacoco-ut
    expire_in: 6 mos
  script:
    - mvn test
    - awk -F"," '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, " lines covered"; print 100*covered/lines, "% covered" }' target/site/jacoco-ut/jacoco.csv
  dependencies:
    - backend_prod_build

frontend_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - branches
  cache:
    <<: *node_cache
    policy: pull
  artifacts:
    paths:
      - war/coverage
    expire_in: 6 mos
  script:
    - export DISPLAY=:10
    - cd war
    - ./node_modules/karma/bin/karma start --single-run
  dependencies:
    - frontend_prod_build

acceptance_tests:
  <<: *job_definition
  stage: test
  only:
    - branches
  cache:
    <<: *node_cache
    policy: pull
  script:
    - chmod +x ./executeAcceptanceTestsJob.sh
    - ./executeAcceptanceTestsJob.sh
  dependencies:
    - frontend_prod_build
    - backend_prod_build

rtcsvc_prod_unittest:
  <<: *job_definition
  stage: test
  only:
    - master
  cache:
    key: "rtcsvc:node_modules"
    untracked: true
    paths:
    - realtime-service/node_modules/
    policy: pull
  artifacts:
    paths:
      - realtime-service/coverage
    expire_in: 1 mo
  script:
    - cd realtime-service
    - echo $RTCSVC_ENV | sed -e 's/\r/\n/g' > .env
    - npm run test
  dependencies:
    - rtcsvc_prod_build

# Does not work yet, with gitlab pages not installed
pages:
  <<: *job_definition
  stage: report
  dependencies:
    - backend_prod_unittest
  script:
    - mv target/site/jacoco-ut/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - branches

.deploy_prod: &deployment_template
  <<: *job_definition
  stage: deploy
  script:
    - echo $DEPLOY_KEY_FILE_PRODUCTION > /tmp/$CI_PIPELINE_ID.json
    - WAR=$(pwd)/target/qdacity-war
    - appcfg.sh --enable_jar_splitting  --enable_jar_classes --noisy --service_account_json_key_file=/tmp/$CI_PIPELINE_ID.json update $WAR

deploy_rtcsvc:
  <<: *job_definition
  stage: deploy
  only:
    - master
  script:
    - cd realtime-service
    - bash ./deployment/deploy_from_gitlab_ci.sh

deploy_prod:
  <<: *deployment_template
  dependencies:
    - backend_prod_build
    - frontend_prod_build
  only:
    - master

deploy_prod_manual:
  <<: *deployment_template
  only:
    - branches
  except:
    - master
  dependencies:
    - backend_prod_build
    - frontend_prod_build
  when: manual

deploy_non_minified:
  <<: *deployment_template
  only:
    - branches
  except:
    - master
  dependencies:
    - backend_prod_build
    - frontend_prod_build_nm
  when: manual

.global_functions: &global_helpers |
    function build_frontend() {
      cd war
      echo $API_CONFIG_PRODUCTION > ./api_config.json
      rm -f ./dist/js/*
      npm prune
      npm install
      while [ -n "$1" ]; do
        subcommand="$1"
        shift
        gulp $subcommand
      done
    }

before_script:
  - *global_helpers
